#!/usr/bin/perl -w
#x3.out.filter=^be\.fedict\.eid\.ext\.middleware\.download\.linux\.([a-z0-9_.-]+)\.(progress\.percentage|state|state\.comment)$

my $BASEURL = 'http://files.eid.belgium.be/';
my $DEBURL = "${BASEURL}debian/";
my $RPMURL = "${BASEURL}rpm/";
my $RESULTPREFIX='be.fedict.eid.ext.middleware.download.linux';

my $REPOTYPE = "";

my %debrepos = (
	'wheezy' => 'debian.oldstable',
	'jessie' => 'debian.stable',
	'precise' => 'ubuntu.oldlts',
	'trusty' => 'ubuntu.lts',
	'wily' => 'ubuntu.stable',
	'maya' => 'mint.oldstable',
	'qiana' => 'mint.stable',
);

my %rpmrepos = (
	'fedora'	=> {
		vers => {
			22 => {
				name => 'oldstable',
				archcount => 2,
			},
			23 => {
				name => 'stable',
				archcount => 2,
			},
		},
		gpg => 'n',
		packstyle => 'fedora',
		short => 'fc'
	},
	'epel'		=> {
		vers => {
			6 => {
				name => 'oldstable',
				archcount => 2,
			},
			7 => {
				name => 'stable',
				archcount => 1,
			},
		},
		gpg => 'n',
		packstyle => 'fedora',
		short => 'el'
	},
	'opensuse'	=> {
		vers => {
			'13.2' => {
				name => 'oldstable',
				archcount => 2,
			},
			'42.1' => {
				name => 'stable',
				archcount => 2,
			},
		},
		gpg => 'y',
		packstyle => 'suse'
	},
);

my %states = ( OK => 0, WARNING => 1, ALERT => 2, MISSING => 3 );

use strict;
use warnings;

use LWP::UserAgent;
use XML::SAX;
use Digest::SHA qw(sha1_hex sha256_hex);
use IO::Uncompress::Gunzip;

my %checksums;

my %packages = (
	'debian' => {
		'eid-mw' => { source => 'eid-mw' },
		'libbeidpkcs11-0' => { source => 'eid-mw' },
		'libbeidpkcs11-dev' => { source => 'eid-mw' },
		'libbeidpkcs11-bin' => { source => 'eid-mw' },
		'libbeidpkcs11-dbg' => { source => 'eid-mw' },
		'beid-mozilla-extension' => { source => 'eid-mw' },
		'eid-viewer' => { source => 'eid-viewer', min => 1 },
		'eid-archive' => { source => 'eid-archive', ignorevers => 1 , min => 1 },
	},
	'fedora' => {
		'eid-mw' => { source => 'eid-mw' },
		'eid-mw-libs' => { source => 'eid-mw' },
		'eid-mw-devel' => { source => 'eid-mw' },
		'eid-mw-debuginfo' => { source => 'eid-mw', min => 0 },
		'eid-mw-bin' => { source => 'eid-mw' },
		'eid-viewer' => { source => 'eid-viewer', min => 1 },
		'eid-archive-el' => { source => 'eid-archive', ignorevers => 1, countsource => 1 , min => 1 },
		'eid-archive-fedora' => { source => 'eid-archive', ignorevers => 1, countsource => 1, min => 1 },
		'eid-archive' => { source => 'eid-archive', ignorevers => 1, min => 1 },
	},
	'suse' => {
		'eid-mw' => { source => 'eid-mw' },
		'eid-mw-libs' => { source => 'eid-mw' },
		'eid-mw-libs-32bit' => { source => 'eid-mw', min => 1 },
		'eid-mw-libs-debuginfo' => { source => 'eid-mw', min => 0 },
		'eid-mw-libs-debuginfo-32bit' => { source => 'eid-mw', min => 0 },
		'eid-mw-devel' => { source => 'eid-mw' },
		'eid-mw-bin' => { source => 'eid-mw' },
		'eid-mw-bin-debuginfo' => { source => 'eid-mw', min => 0 },
		'eid-mw-debugsource' => { source => 'eid-mw', min => 1 },
		'eid-mw-debuginfo' => { source => 'eid-mw', min => 0 },
		'eid-archive-suse' => { source => 'eid-archive', ignorevers => 1, min => 1 },
		'eid-viewer' => { source => 'eid-viewer', min => 1 },
	},
);

my %versions = ( );

my %messages = (
	'progress.percentage' => {},
	'state' => {},
	'state.comment' => {},
);

package repomon::xmlparser;

sub characters {
	my ($self, $data) = @_;

	if(exists($self->{cdata})) {
		${$self->{cdata}} .= $data->{Data};
	}
}

sub new {
	my $class = shift;
	my $self = {};

	$self->{stanzas} = [];
	$self->{stanza} = {};
	$self->{stanzaname} = "";

	bless $self, $class;
}

sub start_element {
	my ($self, $el) = @_;
	my $stanza = $self->{stanza};

	if($el->{LocalName} eq "location") {
		$stanza->{location} = $el->{Attributes}{"{}href"}{Value};
	} elsif($el->{LocalName} eq "checksum") {
		my $key = "checksum-" . $el->{Attributes}{"{}type"}{Value};
		$stanza->{$key} = "";
		$self->{cdata} = \$stanza->{$key};
	}
}

sub end_element {
	my ($self, $el) = @_;

	if(exists($self->{cdata})) {
		delete $self->{cdata};
	}
	if($el->{LocalName} eq $self->{stanzaname}) {
		push @{$self->{stanzas}}, $self->{stanza};
		$self->{stanza} = {};
	}
}

sub getsizes {
	my $self = shift;
	my $retval = [];

	foreach my $stanza(@{$self->{stanzas}}) {
		push @$retval, $stanza->{size};
	}

	return $retval;
}

package repomon::mdparser;

our @ISA = "repomon::xmlparser";

sub new() {
	my $class = shift;

	my $self = $class->repomon::xmlparser::new($class);
	$self->{stanzaname} = "data";

	return $self;
}

sub start_element {
	my ($self, $el) = @_;
	my $stanza = $self->{stanza};

	$self->repomon::xmlparser::start_element($el);

	if($el->{LocalName} eq "size") {
		$stanza->{size} = "";
		$self->{cdata} = \$stanza->{size};
	} elsif($el->{LocalName} eq "data") {
		$stanza->{type} = $el->{Attributes}{"{}type"}{Value};
	}
}

package repomon::prparser;

our @ISA = "repomon::xmlparser";

sub new() {
	my $class = shift;

	my $self = $class->repomon::xmlparser::new($class);
	$self->{stanzaname} = "package";

	return $self;
}

sub start_element {
	my ($self, $el) = @_;
	my $stanza = $self->{stanza};

	$self->repomon::xmlparser::start_element($el);

	if($el->{LocalName} eq "size") {
		$stanza->{size} = $el->{Attributes}{"{}package"}{Value};
	} elsif($el->{LocalName} eq "version") {
		$stanza->{version} = $el->{Attributes}{"{}ver"}{Value} . "." . $el->{Attributes}{"{}rel"}{Value};
	} elsif($el->{LocalName} eq "name") {
		$stanza->{name} = "";
		$self->{cdata} = \$stanza->{name};
	} elsif($el->{LocalName} eq "arch") {
		$stanza->{arch} = "";
		$self->{cdata} = \$stanza->{arch};
	}
}

package repomon::ua;
our @ISA = "LWP::UserAgent";

use Time::HiRes qw(gettimeofday tv_interval);

sub set_x3_sizes() {
	my $self = shift;
	my $sizes = shift;
	$self->{x3_sizes} = $sizes;
	my $total = 0;
	my $inc = [];
	foreach my $size(@$sizes) {
		push @$inc, $total;
		$total += $size;
	}
	$self->{x3_total_size} = $total;
	$self->{x3_inc_sizes} = $inc;
	$self->{x3_prev_st} = [0, 0];
}

sub set_x3_which() {
	my $self = shift;
	$self->{x3_which} = shift;
	$self->{x3_prev_st} = [0, 0];
}

sub set_x3_dist() {
	my $self = shift;
	$self->{x3_dist} = shift;
	$self->{x3_prev_st} = [0, 0];
}

sub progress() {
	my $self = shift;
	return unless defined($self->show_progress) && $self->show_progress > 0;
	return unless tv_interval($self->{x3_prev_st}) > .5;
	my $status = shift;
	my $request_or_response = shift;
	if($status eq "begin") {
		$status = 0;
	} elsif ($status eq "end") {
		$status = 1;
	}
	my $incsize = $self->{x3_inc_sizes}[$self->{x3_which}];
	my $fileloc = $self->{x3_sizes}[$self->{x3_which}] * $status;
	my $curloc = $incsize + $fileloc;
	$status = $curloc / $self->{x3_total_size};
	$status = int($status * 100);
	main::printresult($self->{x3_dist}, "progress.percentage", $status);
	$self->{x3_prev_st} = [gettimeofday()];
}

package main;

my $ua = repomon::ua->new();
$ua->timeout(60);
$ua->env_proxy;

sub printresult($$$) {
	my $dist = shift;
	my $sub = shift;
	my $value = shift;

	if(defined($value)) {
		$messages{$sub}{$dist} = $value;
	} else {
		if(!exists($messages{$sub}{$dist})) {
			return;
		}
		$value = $messages{$sub}{$dist};
	}

	print "${RESULTPREFIX}.${dist}.${sub}=${value}\n";
}

sub parse_package_file($) {
	my $packages = shift;

	my $retval = [];
	my $currpkg = {};

	my $lastline = undef;
	foreach my $line (split /^/, $packages) {
		chomp $line;
		# Doesn't parse the Description: field correctly, but then
		# we're not here to check Description: fields, anyway
		if($line =~ /^ .+/) {
			# line continuation
			die "invalid Packages file"
				unless defined($lastline);
			$line =~ s/^ //;
			$lastline .= $line;
		} elsif($line =~ /^\s*$/) {
			# next stanza.
			next unless defined($lastline);
			my ($key, $value) = split /:/,$lastline,2;
			$value =~ s/^ //;
			$currpkg->{$key} = $value;
			push @$retval, $currpkg;
			$currpkg = {};
			# can't have continuation as first line
			# for a stanza, so undef lastline
			$lastline = undef;
		} else {
			# next key
			if(defined($lastline)) {
				my ($key, $value) = split /:/,$lastline,2;
				$value =~ s/^ //;
				$currpkg->{$key} = $value;
			}
			$lastline = $line;
		}
	}
	return $retval;
}

sub checkdeb() {
	foreach my $repo(keys %debrepos) {
		foreach my $arch('i386', 'amd64') {
			my $distcode = $debrepos{$repo};
			$ua->set_x3_dist($debrepos{$repo} . ".${arch}");
			my $packurl = "${DEBURL}/dists/$REPOTYPE/$repo/main/binary-$arch/Packages";
			my $req = HTTP::Request->new(GET => $packurl);
			my $res = $ua->request($req);
			my %seen;
			foreach my $pack(keys %{$packages{debian}}) {
				$seen{$pack} = 0;
			}
			if($res->is_success) {
				my $p_str = $res->decoded_content();
				my $shasum = sha1_hex($p_str);
				if(exists($checksums{$packurl}) && $shasum eq $checksums{$packurl}) {
					printresult("$distcode.$arch", "progress.percentage", undef);
					printresult("$distcode.$arch", "state", undef);
					printresult("$distcode.$arch", "state.comment", undef);
					next;
				}
				$checksums{$packurl} = $shasum;
				my $parsed_repo = parse_package_file($p_str);
				my $comment = "";
				my $state = $states{OK};
				$ua->show_progress(1);
				my $sizes = [];
				foreach my $package(@$parsed_repo) {
					push @$sizes, $package->{"Size"};
				}
				$ua->set_x3_sizes($sizes);
				my $i = 0;
				foreach my $package(@$parsed_repo) {
					$ua->set_x3_which($i++);
					my $packvers = $package->{"Version"};
					$packvers =~ s/[0-9]+\.[0-9]+\.[0-9]+v([^-]*).*$/$1/g;
					my $sourcepackage = $packages{debian}{$package->{"Package"}}{source};
					if(exists($versions{$sourcepackage})) {
						if($packvers ne $versions{$sourcepackage}) {
							$state = $states{WARNING};
							$comment = "Package " . $package->{"Package"} . " has unexpected version number $packvers";
							last;
						}
					} else {
						if(!exists($packages{debian}{$package->{"Package"}}{ignorevers})) {
							$versions{$sourcepackage} = $packvers;
						}
					}
					$seen{$package->{"Package"}} = 1;
					my $fileurl = "${DEBURL}/" . $package->{Filename};
					my $sha1 = $package->{SHA1};
					my $freq = HTTP::Request->new(GET => "${fileurl}");
					printresult("${distcode}.${arch}", "state.comment", "downloading ${fileurl}");
					my $fres = $ua->request($freq);
					if($fres->is_success) {
						my $digest = sha1_hex($fres->decoded_content());
						if($digest ne $sha1) {
							$state = $states{ALERT};
							$comment = "$fileurl has SHA1 $digest rather than expected SHA1 $sha1";
							last;
						}
					} else {
						$comment = "could not download $fileurl: " . $fres->status_line;
						$state = $states{ALERT};
						last;
					}
					if($package->{Package} eq "eid-mw" || $package->{Package} eq "eid-viewer") {
						$comment .= $package->{"Package"} . "_" . $package->{"Version"} . " ";
					}
				}
				$ua->show_progress(0);
				if($state == $states{OK}) {
					foreach my $pack (keys %seen) {
						if(!$seen{$pack}) {
							$comment = "package $pack missing from index";
							$state = $states{ALERT};
							last;
						}
					}
				}
				printresult("${distcode}.${arch}", "progress.percentage", "100");
				printresult("${distcode}.${arch}", "state.comment", $comment);
				printresult("${distcode}.${arch}", "state", $state);
			} else {
				printresult("${distcode}.${arch}", "state.comment", "could not download $packurl");
				printresult("${distcode}.${arch}", "state", $states{ALERT});
			}
		}
	}
}

sub checkrpm() {
	foreach my $repo(keys %rpmrepos) {
		foreach my $vers(keys %{$rpmrepos{$repo}{vers}}) {
			my $rpmbaseurl = "${RPMURL}/${REPOTYPE}/${repo}/${vers}";
			my $mdurl = "${rpmbaseurl}/repodata/repomd.xml";
			my $req = HTTP::Request->new(GET => $mdurl);
			my $res = $ua->request($req);
			my $comment = "";
			my $state = $states{OK};
			my %seen;
			my $packstyle = $rpmrepos{$repo}{packstyle};
			my $distcode = $repo . "." . $rpmrepos{$repo}{vers}{$vers}{name};

			$ua->set_x3_dist($distcode);

			foreach my $pack(keys %{$packages{$packstyle}}) {
				if(exists($packages{$packstyle}{$pack}{countsource})) {
					$seen{$packages{$packstyle}{$pack}{source}} = 0;
				} else {
					$seen{$pack} = 0;
				}
			}
			if($res->is_success) {
				my $md_str = $res->decoded_content();
				my $shasum = sha1_hex($md_str);
				if(exists($checksums{$mdurl}) && $shasum eq $checksums{$mdurl}) {
					printresult($distcode, "progress.percentage", undef);
					printresult($distcode, "state", undef);
					printresult($distcode, "state.comment", undef);
					next;
				}
				$checksums{$mdurl} = $shasum;
				my $handler = repomon::mdparser->new();
				my $parser = XML::SAX::ParserFactory->parser(Handler => $handler);
				$parser->parse_string($md_str);
				my $sizes = $handler->getsizes();
				$ua->set_x3_sizes($sizes);
				$ua->show_progress(1);
				my $i = 0;
				my $primarydata;
				foreach my $stanza(@{$handler->{stanzas}}) {
					$ua->set_x3_which($i++);
					my $fileurl = "${rpmbaseurl}/" . $stanza->{location};
					my $freq = HTTP::Request->new(GET => $fileurl);
					printresult($distcode, "state.comment", "downloading $fileurl");
					my $fres = $ua->request($freq);
					if($fres->is_success) {
						my $sha256 = $stanza->{"checksum-sha256"};
						my $content = $fres->decoded_content();
						my $digest = sha256_hex($content);
						if($digest ne $sha256) {
							$state = $states{ALERT};
							$comment = "$fileurl has SHA256 $digest rather than expected SHA256 $sha256";
							last;
						}
						if($stanza->{"type"} eq "primary") {
							$primarydata = \$content;
						}
					} else {
						$comment = "could not download $fileurl";
						$state = $states{ALERT};
						last;
					}
				}
				my $z = new IO::Uncompress::Gunzip($primarydata);
				my $prhandler = repomon::prparser->new();
				my $prparser = XML::SAX::ParserFactory->parser(Handler => $prhandler);
				$prparser->parse_file($z);
				push @$sizes, @{$prhandler->getsizes()};
				$ua->set_x3_sizes($sizes);
				foreach my $stanza(@{$prhandler->{stanzas}}) {
					$ua->set_x3_which($i++);
					my $packvers = $stanza->{version};
					my $short;
					my $sourcepackage = $packages{$packstyle}{$stanza->{name}}{source};
                                        if(!defined($sourcepackage)) {
						die "no information on " . $stanza->{name} . " for $distcode!";
                                        }
					my $fileurl = "${rpmbaseurl}/" . $stanza->{location};

					if(exists($rpmrepos{$repo}{short})) {
						$short =  "\\." . $rpmrepos{$repo}{short} . $vers;
					} else {
						$short = '';
					}
					$packvers =~ s/[0-9]+\.[0-9]+\.[0-9]+\.0\.v(.*)${short}(.centos)?$/$1/;
					if(!exists($packages{$packstyle}{$stanza->{name}}{ignorevers})) {
						next if($versions{$sourcepackage} ne $packvers);
					}

					printresult($distcode, "state.comment", "downloading $fileurl");
					my $freq = HTTP::Request->new(GET => $fileurl);
					my $fres = $ua->request($freq);

					if($fres->is_success) {
						my $sha256 = $stanza->{"checksum-sha256"};
						my $content = $fres->decoded_content();
						my $digest = sha256_hex($content);
						if($digest ne $sha256) {
							$state = $states{ALERT};
							$comment = "$fileurl has SHA256 $digest rather than expected SHA256 $sha256";
							last;
						}
						if(exists($packages{$packstyle}{$stanza->{name}}{countsource})) {
							$seen{$sourcepackage}++;
						} else {
							$seen{$stanza->{name}}++;
						}
					} else {
						$comment = "could not download $fileurl";
						$state = $states{ALERT};
						last;
					}
					if($stanza->{name} eq "eid-mw" || $stanza->{name} eq "eid-viewer") {
						$comment .= $stanza->{name} . "-" . $stanza->{version} . "." . $stanza->{arch} . " ";
					}
					# TODO: GPG verification
				}
				foreach my $pack(keys %seen) {
					if($seen{$pack} < $rpmrepos{$repo}{vers}{$vers}{archcount}) {
						if(!exists($packages{$packstyle}{$pack}{min})) {
							$comment = "package $pack found less than twice at correct version";
							$state = $states{ALERT};
							last;
						}
						elsif($seen{$pack} < $packages{$packstyle}{$pack}{min}) {
							$comment = "package $pack found less than 1 time at correct version";
							$state = $states{ALERT};
							last;
						}
					}
				}
			} else {
				$comment = "failed to download $mdurl";
				$state = $states{ALERT};
			}
			printresult($distcode, "progress.percentage", "100");
			printresult($distcode, "state", $state);
			printresult($distcode, "state.comment", $comment);
		}
	}
}

sub repomon() {
	while(1) {
		%versions = ();
		checkdeb;
		checkrpm;
		for(my $i=0; $i<60; $i++) {
			print "\n";
			sleep 10;
			foreach my $sub(keys %messages) {
				foreach my $dist(keys %{$messages{$sub}}) {
					printresult($dist, $sub, undef);
				}
			}
		}
	}
}

repomon;
